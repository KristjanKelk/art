[22  ]/^--^\     /^--^\     /^--^\
[22  ]\[4 _]/     \[4 _]/     \[4 _]/
[21  ]/[6  ]\   /[6  ]\   /[6  ]\
[20  ]|[8  ]| |[8  ]| |[8  ]|
[21  ]\__  __/   \__  __/   \__  __/
[12 |^]\ \[3 ^|]^/ /[4 ^|]^\ \[12 ^|]
[12 | ]|\ \[2 | ]|/ /[5 | ]|\ \[11 | ]|
[12 | ]|/ /[2 | ]|\ \[5 | ]|/ /[11 | ]|
[12 | ]|\/[3  |] \/[5 | ]|\/[12  |]
[73 #]
[36 | ]|
[36 | ]|



                      /^--^\     /^--^\     /^--^\
                      \____/     \____/     \____/
                     /      \   /      \   /      \
                    |        | |        | |        |
                     \__  __/   \__  __/   \__  __/
|^|^|^|^|^|^|^|^|^|^|^|^\ \^|^|^|^/ /^|^|^|^|^\ \^|^|^|^|^|^|^|^|^|^|^|^|
| | | | | | | | | | | | |\ \| | |/ /| | | | | |\ \| | | | | | | | | | | |
| | | | | | | | | | | | |/ /| | |\ \| | | | | |/ /| | | | | | | | | | | |
| | | | | | | | | | | | |\/ | | | \/| | | | | |\/ | | | | | | | | | | | |
#########################################################################
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |

func EncodeArt(input string) string {
    // Split the input string into lines
    lines := strings.Split(input, "\n")
    var result []string

    // Iterate through each line
    for _, line := range lines {
        var lineResult []string
        if len(line) == 0 {
            continue
        }

        currentPattern := string(line[0]) // Initialize the current pattern with the first character of the line
        count := 1 // Initialize the count of the current pattern

        // Iterate through each character of the line
        for i := 1; i < len(line); i++ {
            // Check if the current character is part of the current pattern
            if strings.HasPrefix(line[i:], currentPattern) {
                count++ // Increment the count if the character is part of the pattern
            } else {
                // If the current character is not part of the current pattern,
                // start a new pattern from the current character
                if count > 5 {
                    // Encode the pattern if the count is greater than 5
                    lineResult = append(lineResult, fmt.Sprintf("[%d %s]", count, currentPattern))
                } else {
                    // Otherwise, repeat the pattern without encoding
                    lineResult = append(lineResult, strings.Repeat(currentPattern, count))
                }
                currentPattern = string(line[i]) // Update the current pattern
                count = 1 // Reset the count
            }
        }

        // Process the last pattern
        if count > 5 {
            // Encode the pattern if the count is greater than 5
            lineResult = append(lineResult, fmt.Sprintf("[%d %s]", count, currentPattern))
        } else {
            // Otherwise, repeat the pattern without encoding
            lineResult = append(lineResult, strings.Repeat(currentPattern, count))
        }

        // Join the line result and add it to the overall result
        result = append(result, strings.Join(lineResult, ""))
    }

    // Join all lines and return the encoded result
    return strings.Join(result, "\n")
}
